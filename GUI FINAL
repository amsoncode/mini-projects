import tkinter as tk
import datetime
from tkinter import messagebox
from tkinter import ttk 

def show_main_window():
    user_name = username_entry.get().strip()
    if user_name:
        main_window.title(f"The Sushi House menu")
        main_window.deiconify()
        window.withdraw()
    else:
        messagebox.showinfo("Information", "Please enter your name to continue.")

def show_frame(frame):
    frame.tkraise()

def take():
    global dinein_takeaway_var, payment_method_var
    dinein_takeaway_choice = dinein_takeaway_var.get()
    payment_method_choice = payment_method_var.get()

    if dinein_takeaway_choice == "Where do you want to enjoy your meal?":
        messagebox.showinfo("Information", "You haven't chosen your dining option! Please select one to record your order.")
        return

    if payment_method_choice == "Choose your payment method":
        messagebox.showinfo("Information", "You haven't chosen your payment method! Please select one to record your order.")
        return

    total_price = 0
    order_summary = "Your Order:\n"

    for sushi, spinbox in sushi_entries.items():
        count = int(spinbox.get())
        if count > 0:
            price = sushi_prices[sushi]
            order_summary += f"{count} x {sushi} - Rp. {price * count}\n"
            total_price += price * count

    for drink, spinbox in drink_entries.items():
        count = int(spinbox.get())
        if count > 0:
            price = drink_prices[drink]
            order_summary += f"{count} x {drink} - Rp. {price * count}\n"
            total_price += price * count
    
    total_price_with_tax = total_price * 1.1

    tax = round(total_price_with_tax - total_price, 2)

    total_price_with_tax_int = int(total_price_with_tax)

    if payment_method_choice == "Cash":
        checkout_window.withdraw()
        cash_window = tk.Toplevel(main_window)
        cash_window.title("Enter Cash Amount")
        cash_window.geometry("400x250")
        cash_window.resizable(False, False)
        cash_window.configure(bg="#FFEFD7")

        cash_label = tk.Label(cash_window, text="Enter the amount of cash:", foreground='#821A09', background='#FFEFD7', font=("Times New Roman", 12))
        cash_label.pack(pady=10)

        cash_entry = tk.Entry(cash_window, foreground='#821A09', font=("Times New Roman", 12))
        cash_entry.pack(pady=10)

        confirm_button = tk.Button(cash_window, text="Confirm", fg='#FFEFD7', bg='#EA8E2A', font=("Times New Roman", 12), command=lambda: process_cash(cash_window, cash_entry, total_price_with_tax, tax))
        confirm_button.pack(pady=10)
    else:
        order_summary += f"\nTotal Price (incl. 10% tax): Rp. {total_price_with_tax_int}\n"
        order_summary += f"Tax: Rp. {tax}\n"
        order_summary += f"Payment Method: {payment_method_choice}\n"

        current_time = datetime.datetime.now()
        order_summary += f"\nDate and Time: {current_time.strftime('%Y-%m-%d %H:%M:%S')}"

        msg = f"Thank you! Your order has been successfully recorded.\n\n{order_summary}\n\nPlease go to our cashier to finish your payment."
        messagebox.showinfo(message=msg)
        main_window.destroy()


def process_cash(cash_window, cash_entry, total_price_with_tax, tax):
    cash_amount = float(cash_entry.get())
    cash_window.destroy()

    change = cash_amount - total_price_with_tax
    order_summary = "Your Order:\n"
    order_summary += f"\nTotal Price (incl. 10% tax): Rp. {int(total_price_with_tax)}\n"
    order_summary += f"Tax: Rp. {tax}\n"
    order_summary += f"Paid with Cash: Rp. {cash_amount}\n"
    order_summary += f"Change: Rp. {change}\n"

    current_time = datetime.datetime.now()
    order_summary += f"\nDate and Time: {current_time.strftime('%Y-%m-%d %H:%M:%S')}"

    msg = f"Thank you! Your order has been successfully recorded.\n\n{order_summary}\n\nPlease go to our cashier to finish your payment."
    messagebox.showinfo(message=msg)
    main_window.destroy()

def update_order_label():
    total_items = 0
    total_price = 0
    order_summary = "Your Order:\n"

    for sushi, spinbox in sushi_entries.items():
        count = int(spinbox.get())
        if count > 0:
            price = sushi_prices[sushi]
            order_summary += f"{count} x {sushi} - Rp. {price * count}\n"
            total_items += count
            total_price += price * count

    for drink, spinbox in drink_entries.items():
        count = int(spinbox.get())
        if count > 0:
            price = drink_prices[drink]
            order_summary += f"{count} x {drink} - Rp. {price * count}\n"
            total_items += count
            total_price += price * count

    order_summary += f"\nTotal Price: Rp. {total_price}"
    order_label.config(text=order_summary)

def reset_order():
    
    for spinbox in sushi_entries.values():
        spinbox.delete(0, tk.END)
        spinbox.insert(0, 0)

    for spinbox in drink_entries.values():
        spinbox.delete(0, tk.END)
        spinbox.insert(0, 0)

    update_order_label()

def show_checkout_window():
    global checkout_window
    main_window.withdraw()
    update_order_label()
    global dinein_takeaway_var, payment_method_var
    
    checkout_window = tk.Toplevel(main_window)
    checkout_window.configure(bg="#FFEFD7")
    checkout_window.geometry("400x250")
    checkout_window.resizable(False, False)
    checkout_window.title("Checkout")

    style = ttk.Style()
    style.configure('TMenubutton', foreground='#821A09', background='#FFEFD7', font=("Times New Roman", 12))

    dinein_takeaway_var = tk.StringVar(checkout_window)
    initial_dinein_takeaway = "Where do you want to enjoy your meal?"
    dinein_takeaway_var.set(initial_dinein_takeaway)
    dinein_takeaway_menu = ttk.OptionMenu(checkout_window, dinein_takeaway_var, initial_dinein_takeaway, "Dine In", "Take Away")
    dinein_takeaway_menu.pack(padx=5, pady=5, fill="x")

    payment_method_var = tk.StringVar(checkout_window)
    initial_payment_method = "Choose your payment method"
    payment_method_var.set(initial_payment_method)
    payment_method_menu = ttk.OptionMenu(checkout_window, payment_method_var, initial_payment_method, "Cash", "Credit/Debit Card", "M-Banking", "E-Wallet")
    payment_method_menu.pack(padx=5, pady=5, fill="x")

    order_button = tk.Button(checkout_window, text="Order", fg='#FFEFD7', bg='#EA8E2A', font=("Times New Roman", 16, "bold"), command=take, borderwidth=2, relief="raised")
    order_button.pack(pady=10)

window = tk.Tk()
window.configure(bg="#FFEFD7")
window.geometry("400x250")
window.resizable(False, False)
window.title("The Sushi House")

username_label = tk.Label(window, text="Welcome to The Sushi Houseüç•üèØ", fg='#821A09', bg="#FFEFD7", font=("Times New Roman", 16, "bold"))
username_label.pack()

username_prompt_label = tk.Label(window, text="To start your order, please enter your name", fg='#821A09', bg="#FFEFD7", font=("Times New Roman", 12))
username_prompt_label.pack()

username_entry = tk.Entry(window, font=("Times New Roman", 12))
username_entry.pack(pady=10)

enter_button = tk.Button(window, text="Enter", fg='#FFEFD7', bg='#EA8E2A', font=("Times New Roman", 16, "bold"), command=show_main_window, borderwidth=2, relief="raised")
enter_button.pack(pady=10)

main_window = tk.Toplevel(window)
main_window.configure(bg="#FFEFD7")
main_window.geometry("700x400")
main_window.resizable(False, False)
main_window.withdraw()

menu_bar = tk.Menu(main_window)
main_window.config(menu=menu_bar)

sushi_frame = tk.Frame(main_window, bg="#FFEFD7")
drinks_frame = tk.Frame(main_window, bg="#FFEFD7")
sushi_frame.grid(row=0, column=0, sticky='nsew')
drinks_frame.grid(row=0, column=0, sticky='nsew')

drink_entries = {}
drink_prices = {
    "Ice Apple Tea": 20000,
    "Ice Lychee Tea": 22000,
    "Ocha": 10000,
    "Mineral Water": 10000,
}

tk.Label(drinks_frame, text="Drinks Menu", fg='#821A09', bg="#FFEFD7", font=("Times New Roman", 16, "bold"), justify="left").grid(row=0, columnspan=3, pady=20)

row_number = 1
for item, price in drink_prices.items():
    tk.Label(drinks_frame, text=item, fg='#821A09', bg="#FFEFD7", font=("Times New Roman", 12)).grid(row=row_number, column=0, sticky='w', padx=(10, 5))
    tk.Label(drinks_frame, text=f"Rp. {price}", fg='#821A09', bg="#FFEFD7", font=("Times New Roman", 12)).grid(row=row_number, column=1, sticky='e', padx=(5, 10))
    spinbox = tk.Spinbox(drinks_frame, from_=0, to=100, width=5, fg='#821A09', bg='#EA8E2A', command=update_order_label)
    spinbox.grid(row=row_number, column=2, sticky='e', padx=(5, 10))
    drink_entries[item] = spinbox
    row_number += 1

sushi_entries = {}
sushi_prices = {
    "Salmon Cheese Roll": 42000,
    "Dragon Roll": 45000,
    "Salmon Carpaccio": 37000,
    "Stamina Roll": 35000,
    "Nori Ten Salmon": 34000,
    "Californian Roll": 39000,
    "Aburi Salmon": 36000,
    "Tamago Maki": 37000,
    "Maguro Yoridori": 40000,
    "Hodaka": 34000
}

tk.Label(sushi_frame, text="Sushi Menu", fg='#821A09', bg="#FFEFD7", font=("Times New Roman", 16, "bold")).grid(row=0, columnspan=3, pady=20)

row_number = 1
for item, price in sushi_prices.items():
    tk.Label(sushi_frame, text=item, fg='#821A09', bg="#FFEFD7", font=("Times New Roman", 12)).grid(row=row_number, column=0, sticky='w', padx=(10, 5))
    tk.Label(sushi_frame, text=f"Rp. {price}", fg='#821A09', bg="#FFEFD7", font=("Times New Roman", 12)).grid(row=row_number, column=1, sticky='e', padx=(5, 10))
    spinbox = tk.Spinbox(sushi_frame, from_=0, to=100, width=5, fg='#821A09', bg='#EA8E2A', command=update_order_label)
    spinbox.grid(row=row_number, column=2, sticky='e', padx=(5, 10))
    sushi_entries[item] = spinbox
    row_number += 1

order_label = tk.Label(main_window, text="Your Order:", fg='#821A09', bg="#FFEFD7", font=("Times New Roman", 12, "bold"), justify="left")
order_label.grid(row=0, column=1, padx=10, pady=20, sticky="n") 

checkout_button = tk.Button(main_window, text="Checkout", fg='#FFEFD7', bg='#EA8E2A', font=("Times New Roman", 16, "bold"), command=show_checkout_window, borderwidth=2, relief="raised")
checkout_button.grid(row=1, column=1, pady=10, sticky="n")
cancel_button = tk.Button(main_window, text="Reset Order", fg='#FFEFD7', bg='#EA8E2A',
                          font=("Times New Roman", 16, "bold"), command=reset_order, borderwidth=2,
                          relief="raised")
cancel_button.grid(row=1, column=2, pady=10, sticky="n")


menu_bar.add_command(label="Sushi", command=lambda: show_frame(sushi_frame))
menu_bar.add_command(label="Drinks", command=lambda: show_frame(drinks_frame))

window.mainloop()
